{"version":3,"sources":["api/api.ts","hoc/TodoProvider.tsx","Pages/TodoForm.tsx","Pages/TodoFooter.tsx","components/Layout.tsx","Pages/TodoItem.tsx","Pages/TodoList.tsx","Pages/NotFoundPage/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["request","url","method","fetch","then","response","ok","json","Promise","reject","Error","status","statusText","newUser","name","username","email","phone","body","JSON","stringify","headers","getTodos","userId","deleteTodo","todoId","TodoContext","React","createContext","todos","setTodos","user","TodoProvider","children","useState","setUser","loadUser","userName","a","person","length","useEffect","loadTodos","allTodos","id","contextValue","useMemo","Provider","value","TodoForm","useContext","allCompleted","setAllCompleted","inputValue","setInputValue","completedTodos","count","filter","todo","completed","addTodo","title","createTodo","newTodo","Date","now","prevState","className","onSubmit","event","preventDefault","type","placeholder","onChange","target","onKeyDown","key","classNames","onClick","map","TodoFooter","haveCompleted","setHaveCompleted","to","ac","isActive","delCompleted","Layout","toUpperCase","TodoItem","titleInList","setTitleInList","edit","setEdit","editValue","setEditValue","handleDoubleClick","changeTodo","editTodo","onDoubleClick","checked","style","width","e","onBlur","autoFocus","disabled","TodoList","useParams","visibleTodos","NotFoundPage","App","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.47df88ab.chunk.js","sourcesContent":["// eslint-disable-next-line max-len\nexport const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string, method?: RequestInit | undefined) => {\n  return fetch(`${BASE_URL}${url}`, method)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(\n          new Error(`${response.status} - ${response.statusText}`),\n        );\n      }\n\n      return response.json();\n    });\n};\n\nexport const getUser = (username: string) => {\n  return request(`/users?username=${username}`);\n};\n\nexport const newUser = (\n  name: string,\n  username: string,\n  email: string,\n  phone: string,\n) => {\n  return request('/users', {\n    method: 'POST',\n    body: JSON.stringify({\n      name,\n      username,\n      email,\n      phone,\n    }),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  });\n};\n\nexport const createTodo = (\n  userId: number,\n  title: string,\n) => {\n  return request('/todos', {\n    method: 'POST',\n    body: JSON.stringify({\n      title,\n      userId,\n      completed: false,\n    }),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  });\n};\n\nexport const getTodos = (userId: number) => {\n  return request(`/todos?userId=${userId}`);\n};\n\nexport const deleteTodo = (todoId?: number) => {\n  return request(`/todos/${todoId}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const editTodo = (todoId: number, value: unknown) => {\n  return request(`/todos/${todoId}`, {\n    method: 'PATCH',\n    body: JSON.stringify(value),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  });\n};\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { getTodos, getUser, newUser } from '../api/api';\n\ntype Context = {\n  todos: Todo[],\n  setTodos: (todos: Todo[] | ((prevState: Todo[]) => Todo[])) => void,\n  user: User | null,\n};\n\nexport const TodoContext = React.createContext<Context>({\n  todos: [],\n  setTodos: () => {},\n  user: null,\n});\n\nexport const TodoProvider: React.FC = ({ children }) => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [user, setUser] = useState<User | null>(null);\n\n  const loadUser = async (userName: string) => {\n    const person = await getUser(userName);\n\n    if (person.length === 0) {\n      newUser(\n        'Dina Samoilova',\n        'DinaSamoilova',\n        'dina.samoilova13@gmail.com',\n        '+380679326850',\n      )\n        .then(setUser);\n    } else {\n      setUser(person[0]);\n    }\n  };\n\n  useEffect(() => {\n    loadUser('DinaSamoilova');\n  }, []);\n\n  const loadTodos = async (userId: number) => {\n    const allTodos = await getTodos(userId);\n\n    setTodos(allTodos);\n  };\n\n  useEffect(() => {\n    if (user) {\n      loadTodos(user.id);\n    }\n  }, [user]);\n\n  const contextValue = useMemo(() => {\n    return {\n      todos,\n      setTodos,\n      user,\n    };\n  }, [todos, user]);\n\n  return (\n    <TodoContext.Provider value={contextValue}>\n      {children}\n    </TodoContext.Provider>\n  );\n};\n","import classNames from 'classnames';\nimport React, {\n  useContext,\n  useMemo,\n  useState,\n} from 'react';\nimport { TodoContext } from '../hoc/TodoProvider';\nimport { createTodo } from '../api/api';\nimport './TodoForm.scss';\n\nexport const TodoForm: React.FC = () => {\n  const { todos, setTodos, user } = useContext(TodoContext);\n  const [allCompleted, setAllCompleted] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n\n  const completedTodos = useMemo(() => {\n    const count = todos.filter(todo => todo.completed === true).length;\n\n    if (count === todos.length) {\n      setAllCompleted(true);\n    } else {\n      setAllCompleted(false);\n    }\n\n    return count;\n  }, [todos]);\n\n  const handleChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  const allDoneButton = () => {\n    if (!allCompleted && todos) {\n      setTodos(todos.map(todo => {\n        if (!todo.completed) {\n          return { ...todo, completed: true };\n        }\n\n        setAllCompleted(false);\n\n        return todo;\n      }));\n    }\n\n    if (allCompleted && todos) {\n      setTodos(todos.map(todo => {\n        if (todo.completed) {\n          return { ...todo, completed: false };\n        }\n\n        setAllCompleted(true);\n\n        return todo;\n      }));\n    }\n  };\n\n  const addTodo = (userId: number, title: string) => {\n    if (user && title) {\n      createTodo(userId, title);\n\n      const newTodo = {\n        id: Date.now(),\n        title,\n        completed: false,\n        userId,\n      };\n\n      setTodos((prevState: Todo[]) => ([\n        ...prevState,\n        newTodo,\n      ]));\n    }\n\n    setInputValue('');\n  };\n\n  const handleSubmit: React.FormEventHandler<HTMLFormElement> = (event) => {\n    event.preventDefault();\n    if (user) {\n      addTodo(user?.id, inputValue);\n    }\n  };\n\n  const handleKeydown:\n  React.KeyboardEventHandler<HTMLInputElement> = (event) => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      if (user) {\n        addTodo(user?.id, inputValue);\n      }\n    }\n  };\n\n  return (\n    <form\n      className=\"field field__form\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          className=\"input is-primary pl-6 is-relative\"\n          placeholder=\"What needs to be done?\"\n          onChange={handleChange}\n          onKeyDown={handleKeydown}\n        />\n\n        {(todos && todos.length > 0) && (\n          <button\n            type=\"button\"\n            className={classNames(\n              'button icon btnAll',\n              {\n                'has-text-grey-light': todos?.length !== completedTodos,\n                'has-text-primary': todos?.length === completedTodos,\n              },\n            )}\n            title=\"select all\"\n            onClick={allDoneButton}\n          >\n            <i className=\"fas fa-check\" />\n          </button>\n        )}\n\n        {inputValue.length > 0 && (\n          <button\n            type=\"submit\"\n            className=\"button icon has-text-primary btnAdd\"\n            title=\"add todo\"\n          >\n            <i className=\"fas fa-add\" />\n          </button>\n        )}\n      </div>\n    </form>\n  );\n};\n","import React, {\n  useContext,\n  useState,\n  useMemo,\n} from 'react';\nimport classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\nimport { TodoContext } from '../hoc/TodoProvider';\nimport { deleteTodo } from '../api/api';\nimport './TodoFooter.scss';\n\nexport const TodoFooter: React.FC = () => {\n  const { todos, setTodos } = useContext(TodoContext);\n  const [haveCompleted, setHaveCompleted] = useState(0);\n\n  const completedTodos = useMemo(() => {\n    const count = todos\n      ? todos.filter(todo => todo.completed === true).length\n      : 0;\n\n    if (count > 0) {\n      setHaveCompleted(count);\n    }\n\n    if (count === 0) {\n      setHaveCompleted(0);\n    }\n\n    return count;\n  }, [todos]);\n\n  const removedCompleted = () => {\n    setTodos(todos.filter(todo => {\n      if (todo.completed) {\n        deleteTodo(todo.id);\n      }\n\n      return !todo.completed;\n    }));\n  };\n\n  return (\n    <>\n      {(todos && todos.length > 0) && (\n        <div className=\"panel-block\">\n          <div\n            className=\"field field__footer\"\n          >\n            <div className=\"conteiner\">\n              <div\n                className=\"field is-grouped is-justify-content-space-between\"\n              >\n                <div className=\"content mb-0\">\n                  <p className=\"is-size-6\">\n                    {todos && `${todos?.length - haveCompleted}\n                  ${todos?.length - haveCompleted === 1 ? ' item' : ' items'} left`}\n                  </p>\n                </div>\n\n                <div className=\"conteiner mb-0\">\n                  <div\n                    className=\"panel-tabs tabs is-small mb-0 status\"\n                  >\n                    <NavLink\n                      to=\"/\"\n                      className={({ isActive: ac }) => classNames(\n                        {\n                          'is-active has-text-white has-background-primary': ac,\n                        },\n                      )}\n                    >\n                      All\n                    </NavLink>\n\n                    <NavLink\n                      to=\"/active\"\n                      className={({ isActive: ac }) => classNames(\n                        'status--middle',\n                        {\n                          'is-active has-text-white has-background-primary': ac,\n                        },\n                      )}\n                    >\n                      Active\n                    </NavLink>\n\n                    <NavLink\n                      to=\"/completed\"\n                      className={({ isActive: ac }) => classNames(\n                        {\n                          'is-active has-text-white has-background-primary': ac,\n                        },\n                      )}\n                    >\n                      Completed\n                    </NavLink>\n                  </div>\n                </div>\n\n                <div\n                  className={classNames(\n                    'conteiner mb-0',\n                    { delCompleted: completedTodos === 0 },\n                  )}\n                >\n                  <div className=\"buttons\">\n                    <button\n                      type=\"button\"\n                      className=\"button is-danger is-rounded is-small\"\n                      onClick={removedCompleted}\n                    >\n                      Clear completed\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useContext } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { TodoForm } from '../Pages/TodoForm';\nimport { TodoFooter } from '../Pages/TodoFooter';\nimport { TodoContext } from '../hoc/TodoProvider';\nimport './Layout.scss';\n\nexport const Layout: React.FC = () => {\n  const { user } = useContext(TodoContext);\n\n  return (\n    <>\n      <div className=\"conteiner is-max-widescreen px-6\">\n        <div\n          className=\"box m-auto app\"\n        >\n          <div className=\"panel is-primary\">\n            <h1 className=\"panel-heading has-text-centered is-size-1\">\n              {user?.name.toUpperCase()}\n              <br />\n              TODOS\n            </h1>\n\n            <div className=\"panel-block\">\n              <TodoForm />\n            </div>\n\n            <Outlet />\n\n            <TodoFooter />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import React, { useState, useContext } from 'react';\nimport classNames from 'classnames';\nimport { TodoContext } from '../hoc/TodoProvider';\nimport { deleteTodo, editTodo } from '../api/api';\nimport './TodoItem.scss';\n\nexport const TodoItem: React.FC<Todo> = ({ id, title, completed }) => {\n  const [titleInList, setTitleInList] = useState(title);\n  const [edit, setEdit] = useState(false);\n  const [editValue, setEditValue] = useState(titleInList);\n  const { todos, setTodos } = useContext(TodoContext);\n\n  const handleCheckbox = (todoId: number) => {\n    setTodos(todos.map(todo => {\n      if (todoId === todo.id) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const handleDoubleClick = () => {\n    setEdit(true);\n  };\n\n  const handleClick = () => {\n    setEdit(true);\n  };\n\n  const handleChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    setEditValue(event.target.value);\n  };\n\n  const changeTodo = (todoId: number) => {\n    editTodo(todoId, { title: editValue });\n\n    setTodos(todos.map(todo => {\n      if (todoId === todo.id) {\n        return {\n          ...todo,\n          title: editValue,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const handleKeydown = (event: React.KeyboardEvent<HTMLInputElement>,\n    todoId: number) => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      setTitleInList(editValue);\n      changeTodo(todoId);\n      setEdit(false);\n    }\n\n    if (event.key === 'Escape') {\n      event.preventDefault();\n      setEditValue(titleInList);\n      setEdit(false);\n    }\n  };\n\n  const handleBlur = (todoId: number) => {\n    setTitleInList(editValue);\n    changeTodo(todoId);\n    setEdit(false);\n  };\n\n  const removeTodo = (todoId: number) => {\n    deleteTodo(todoId);\n\n    setTodos(todos.filter(todo => todo.id !== todoId));\n  };\n\n  return (\n    <li>\n      <div className=\"field is-grouped is-justify-content-space-between\">\n        <div\n          className=\"field field--width\"\n        >\n          <label\n            className=\"field\"\n            title=\"done\"\n            onDoubleClick={handleDoubleClick}\n          >\n            <span className=\"icon has-text-primary\">\n              {completed === false && (\n                <i className=\"fa-regular fa-circle mx-1\" />\n              )}\n\n              {completed === true && (\n                <i className=\"fa-regular fa-circle-check mx-1\" />\n              )}\n            </span>\n\n            <input\n              type=\"checkbox\"\n              checked={completed}\n              className=\"checked\"\n              onChange={() => handleCheckbox(id)}\n            />\n\n          </label>\n\n          <label\n            className=\"field\"\n            onDoubleClick={handleDoubleClick}\n          >\n            {!edit\n              ? (\n                <>\n                  <p\n                    className={classNames(\n                      'todo',\n                      { 'todo--complete': completed === true },\n                    )}\n                  >\n                    {titleInList}\n                  </p>\n                </>\n              )\n              : (\n                <input\n                  type=\"text\"\n                  value={editValue}\n                  className=\"input is-primary\"\n                  style={{ width: '80%' }}\n                  onChange={handleChange}\n                  onKeyDown={(e) => handleKeydown(e, id)}\n                  onBlur={() => handleBlur(id)}\n                  // eslint-disable-next-line jsx-a11y/no-autofocus\n                  autoFocus\n                />\n              )}\n          </label>\n        </div>\n\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className=\"button icon has-text-info btn\"\n            title=\"edit\"\n            disabled={edit}\n            onClick={handleClick}\n          >\n            <i className=\"fas fa-solid fa-feather fa-aling-right\" />\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"button icon has-text-danger btn\"\n            title=\"delete\"\n            disabled={edit}\n            onClick={() => removeTodo(id)}\n          >\n            <i className=\"fas fa-solid fa-circle-xmark fa-aling-right\" />\n          </button>\n        </div>\n      </div>\n    </li>\n  );\n};\n","import React, { useContext, useMemo } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { TodoItem } from './TodoItem';\nimport { TodoContext } from '../hoc/TodoProvider';\nimport './TodoList.scss';\n\nexport const TodoList: React.FC = () => {\n  const { todos } = useContext(TodoContext);\n  const { status } = useParams<{ status: string }>();\n\n  const visibleTodos = useMemo(() => {\n    return todos.filter(todo => {\n      switch (status) {\n        case 'active':\n          return todo.completed === false;\n        case 'completed':\n          return todo.completed === true;\n        default:\n          return todo;\n      }\n    });\n  }, [todos, status]);\n\n  return (\n    <>\n      {todos.length > 0 && (\n        <div className=\"panel-block\">\n          <div\n            className=\"content content--width\"\n          >\n            <ul\n              className=\"m-0 list\"\n            >\n              {visibleTodos.map(todo => (\n                <TodoItem\n                  key={todo.id}\n                  {...todo}\n                />\n              ))}\n            </ul>\n          </div>\n        </div>\n      )}\n    </>\n\n  );\n};\n","import React from 'react';\n\nexport const NotFoundPage: React.FC = () => (\n  <p className=\"has-text-centered has-text-danger is-size-2\">Page not found</p>\n);\n","import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { Layout } from './components/Layout';\nimport { TodoList } from './Pages/TodoList';\nimport { NotFoundPage } from './Pages/NotFoundPage/NotFoundPage';\nimport { TodoProvider } from './hoc/TodoProvider';\nimport 'bulma';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nexport const App: React.FC = () => {\n  return (\n    <TodoProvider>\n      <Routes>\n        <Route path=\"/\" element={<Layout />}>\n          <Route path=\"/\" element={<TodoList />}>\n            <Route path=\":status\" element={<TodoList />} />\n          </Route>\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Route>\n      </Routes>\n    </TodoProvider>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}