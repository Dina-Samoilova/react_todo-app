{"version":3,"sources":["hoc/TodoProvider.tsx","Pages/TodoForm.tsx","Pages/TodoFooter.tsx","components/Layout.tsx","Pages/TodoItem.tsx","Pages/TodoList.tsx","Pages/NotFoundPage/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["TodoContext","React","createContext","TodoProvider","children","useState","saved","localStorage","getItem","JSON","parse","todos","setTodos","filteredTodos","setFilteredTodos","useEffect","setItem","stringify","Provider","value","TodoForm","content","useContext","allCompleted","setAllCompleted","inputValue","setInputValue","completedTodos","useMemo","count","filter","todo","completed","length","addTodo","id","Date","now","title","className","style","width","onSubmit","event","preventDefault","type","placeholder","onChange","target","onKeyDown","key","classNames","border","position","top","left","onClick","map","right","TodoFooter","filterBy","setFilterBy","haveCompleted","setHaveCompleted","handleFilterStatus","borderRadius","to","ac","isActive","borderLeft","borderRight","visibility","Layout","maxWidth","minWidth","TodoItem","titleInList","setTitleInList","edit","setEdit","editValue","setEditValue","handleDoubleClick","editTodo","todoId","onDoubleClick","checked","e","onBlur","autoFocus","display","textDecoration","color","disabled","TodoList","listStyle","NotFoundPage","App","path","element","index","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.00dcca62.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\ntype Context = {\n  todos: Todo[],\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>,\n  filteredTodos: Todo[],\n  setFilteredTodos: React.Dispatch<React.SetStateAction<Todo[]>>,\n};\n\nexport const TodoContext = React.createContext<Context | null>(null);\n\nexport const TodoProvider: React.FC = ({ children }) => {\n  const [todos, setTodos] = useState<Todo[]>(() => {\n    const saved = localStorage.getItem('todos');\n    const initialValue = saved && JSON.parse(saved);\n\n    return initialValue || [];\n  });\n  const [filteredTodos, setFilteredTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    setFilteredTodos(todos);\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  return (\n    <TodoContext.Provider value={{\n      todos,\n      setTodos,\n      filteredTodos,\n      setFilteredTodos,\n    }}\n    >\n      {children}\n    </TodoContext.Provider>\n  );\n};\n","import classNames from 'classnames';\nimport React, {\n  useContext,\n  useMemo,\n  useState,\n} from 'react';\nimport { TodoContext } from '../hoc/TodoProvider';\n\nexport const TodoForm: React.FC = () => {\n  const content = useContext(TodoContext);\n  const todos = content?.todos;\n  const setTodos = content?.setTodos;\n  const [allCompleted, setAllCompleted] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n\n  const completedTodos = useMemo(() => {\n    const count = todos\n      && todos.filter(todo => todo.completed === true).length;\n\n    if (count === todos?.length) {\n      setAllCompleted(true);\n    } else {\n      setAllCompleted(false);\n    }\n\n    return count;\n  }, [todos]);\n\n  const handleChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  const allDoneButton = () => {\n    if (!allCompleted && setTodos && todos) {\n      setTodos(todos.map(todo => {\n        if (!todo.completed) {\n          return { ...todo, completed: true };\n        }\n\n        setAllCompleted(false);\n\n        return todo;\n      }));\n    }\n\n    if (allCompleted && setTodos && todos) {\n      setTodos(todos.map(todo => {\n        if (todo.completed) {\n          return { ...todo, completed: false };\n        }\n\n        setAllCompleted(true);\n\n        return todo;\n      }));\n    }\n  };\n\n  const addTodo = () => {\n    if (inputValue && todos && setTodos) {\n      setTodos([\n        ...todos,\n        {\n          id: Date.now(),\n          title: inputValue,\n          completed: false,\n        },\n      ]);\n\n      setInputValue('');\n    }\n  };\n\n  const handleSubmit: React.FormEventHandler<HTMLFormElement> = (event) => {\n    event.preventDefault();\n    addTodo();\n  };\n\n  const handleKeydown:\n  React.KeyboardEventHandler<HTMLInputElement> = (event) => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      addTodo();\n    }\n  };\n\n  return (\n    <form\n      className=\"field\"\n      style={{ width: '100%' }}\n      onSubmit={handleSubmit}\n    >\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          className=\"input is-primary pl-6\"\n          placeholder=\"What needs to be done?\"\n          onChange={handleChange}\n          onKeyDown={handleKeydown}\n        />\n\n        {(todos && todos.length > 0) && (\n          <button\n            type=\"button\"\n            className={classNames(\n              'button icon ',\n              {\n                'has-text-grey-light': todos?.length !== completedTodos,\n                'has-text-primary': todos?.length === completedTodos,\n              },\n            )}\n            title=\"select all\"\n            style={{\n              border: 'none',\n              position: 'absolute',\n              top: '8px',\n              left: '5px',\n            }}\n            onClick={allDoneButton}\n          >\n            <i className=\"fas fa-check\" />\n          </button>\n        )}\n\n        {inputValue.length > 0 && (\n          <button\n            type=\"submit\"\n            className=\"button icon has-text-primary\"\n            title=\"add todo\"\n            style={{\n              border: 'none',\n              position: 'absolute',\n              top: '8px',\n              right: '5px',\n            }}\n          >\n            <i className=\"fas fa-add\" />\n          </button>\n        )}\n      </div>\n    </form>\n  );\n};\n","import React, {\n  useContext,\n  useEffect,\n  useState,\n  useMemo,\n} from 'react';\nimport classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\nimport { TodoContext } from '../hoc/TodoProvider';\n\nexport const TodoFooter: React.FC = () => {\n  const content = useContext(TodoContext);\n  const todos = content?.todos;\n  const setTodos = content?.setTodos;\n  const setFilteredTodos = content?.setFilteredTodos;\n  const [filterBy, setFilterBy] = useState('all');\n  const [haveCompleted, setHaveCompleted] = useState(0);\n\n  const handleFilterStatus = (value: string) => {\n    setFilterBy(value);\n  };\n\n  useEffect(() => {\n    if (todos && setFilteredTodos) {\n      switch (filterBy) {\n        case 'active':\n          setFilteredTodos(todos.filter(todo => todo.completed === false));\n          break;\n        case 'completed':\n          setFilteredTodos(todos.filter(todo => todo.completed === true));\n          break;\n        default:\n          setFilteredTodos(todos);\n          break;\n      }\n    }\n  }, [filterBy]);\n\n  const completedTodos = useMemo(() => {\n    const count = todos\n      ? todos.filter(todo => todo.completed === true).length\n      : 0;\n\n    if (count > 0) {\n      setHaveCompleted(count);\n    }\n\n    if (count === 0) {\n      setHaveCompleted(0);\n    }\n\n    return count;\n  }, [todos]);\n\n  const removedCompleted = () => {\n    if (todos && setTodos) {\n      setTodos(todos.filter(todo => todo.completed === false));\n    }\n  };\n\n  return (\n    <>\n      {(todos && todos.length > 0) && (\n        <div className=\"panel-block\">\n          <div\n            className=\"field\"\n            style={{ width: '100%' }}\n          >\n            <div className=\"conteiner\">\n              <div\n                className=\"field is-grouped is-justify-content-space-between\"\n              >\n                <div className=\"content mb-0\">\n                  <p className=\"is-size-6\">\n                    {todos && `${todos?.length - haveCompleted}\n                  ${todos?.length - haveCompleted === 1 ? ' item' : ' items'} left`}\n                  </p>\n                </div>\n\n                <div className=\"conteiner mb-0\">\n                  <div\n                    className=\"panel-tabs tabs is-small mb-0\"\n                    style={{\n                      borderRadius: '20px',\n                      border: '0.5px solid lightgrey',\n                    }}\n                  >\n                    <NavLink\n                      to=\"/\"\n                      className={({ isActive: ac }) => classNames(\n                        {\n                          'is-active has-text-white has-background-primary': ac,\n                        },\n                      )}\n                      onClick={() => handleFilterStatus('all')}\n                    >\n                      All\n                    </NavLink>\n\n                    <NavLink\n                      to=\"/active\"\n                      className={({ isActive: ac }) => classNames(\n                        {\n                          'is-active has-text-white has-background-primary': ac,\n                        },\n                      )}\n                      style={{\n                        borderLeft: '0.5px solid lightgrey',\n                        borderRight: '0.5px solid lightgrey',\n                      }}\n                      onClick={() => handleFilterStatus('active')}\n                    >\n                      Active\n                    </NavLink>\n\n                    <NavLink\n                      to=\"/completed\"\n                      className={({ isActive: ac }) => classNames(\n                        {\n                          'is-active has-text-white has-background-primary': ac,\n                        },\n                      )}\n                      onClick={() => handleFilterStatus('completed')}\n                    >\n                      Completed\n                    </NavLink>\n                  </div>\n                </div>\n\n                <div\n                  className=\"conteiner mb-0\"\n                  style={{\n                    visibility: completedTodos === 0 ? 'hidden' : 'visible',\n                  }}\n                >\n                  <div className=\"buttons\">\n                    <button\n                      type=\"button\"\n                      className=\"button is-danger is-rounded is-small\"\n                      onClick={removedCompleted}\n                    >\n                      Clear completed\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { TodoForm } from '../Pages/TodoForm';\nimport { TodoFooter } from '../Pages/TodoFooter';\n\nexport const Layout: React.FC = () => {\n  return (\n    <>\n      <div className=\"conteiner is-max-widescreen px-6\">\n        <div\n          className=\"box m-auto\"\n          style={{\n            maxWidth: '600px',\n            minWidth: '400px',\n          }}\n        >\n          <div className=\"panel is-primary\">\n            <h1 className=\"panel-heading has-text-centered is-size-1\">\n              TODOS\n            </h1>\n\n            <div className=\"panel-block\">\n              <TodoForm />\n            </div>\n\n            <Outlet />\n\n            <TodoFooter />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import React, { useState, useContext } from 'react';\nimport { TodoContext } from '../hoc/TodoProvider';\n\nexport const TodoItem: React.FC<Todo> = ({ id, title, completed }) => {\n  const [titleInList, setTitleInList] = useState(title);\n  const [edit, setEdit] = useState(false);\n  const [editValue, setEditValue] = useState(titleInList);\n  const content = useContext(TodoContext);\n  const todos = content?.todos;\n  const setTodos = content?.setTodos;\n\n  const handleCheckbox = (todoId: number) => {\n    if (todos && setTodos) {\n      setTodos(todos.map(todo => {\n        if (todoId === todo.id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }));\n    }\n  };\n\n  const handleDoubleClick = () => {\n    setEdit(true);\n  };\n\n  const handleClick = () => {\n    setEdit(true);\n  };\n\n  const handleChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    setEditValue(event.target.value);\n  };\n\n  const editTodo = (todoId: number) => {\n    if (todos && setTodos) {\n      setTodos(todos.map(todo => {\n        if (todoId === todo.id) {\n          return {\n            ...todo,\n            title: editValue,\n          };\n        }\n\n        return todo;\n      }));\n    }\n  };\n\n  const handleKeydown = (event: React.KeyboardEvent<HTMLInputElement>,\n    todoId: number) => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      setTitleInList(editValue);\n      editTodo(todoId);\n      setEdit(false);\n    }\n\n    if (event.key === 'Escape') {\n      event.preventDefault();\n      setEditValue(titleInList);\n      setEdit(false);\n    }\n  };\n\n  const handleBlur = (todoId: number) => {\n    setTitleInList(editValue);\n    editTodo(todoId);\n    setEdit(false);\n  };\n\n  const removeTodo = (todoId: number) => {\n    if (todos && setTodos) {\n      setTodos(todos.filter(todo => todo.id !== todoId));\n    }\n  };\n\n  return (\n    <li>\n      <div className=\"field is-grouped is-justify-content-space-between\">\n        <div\n          className=\"field\"\n          style={{ width: '80%' }}\n        >\n          <label\n            className=\"field\"\n            title=\"done\"\n            onDoubleClick={handleDoubleClick}\n          >\n            <span className=\"icon has-text-primary\">\n              {completed === false && (\n                <i className=\"fa-regular fa-circle mx-1\" />\n              )}\n\n              {completed === true && (\n                <i className=\"fa-regular fa-circle-check mx-1\" />\n              )}\n            </span>\n\n            <input\n              type=\"checkbox\"\n              checked={completed}\n              style={{ visibility: 'hidden' }}\n              onChange={() => handleCheckbox(id)}\n            />\n\n          </label>\n\n          <label\n            className=\"field\"\n            onDoubleClick={handleDoubleClick}\n          >\n            {!edit\n              ? (\n                <>\n                  <p\n                    style={{\n                      width: '80%',\n                      display: 'inline-block',\n                      textDecoration: completed === true\n                        ? 'line-through'\n                        : 'none',\n                      color: completed === true\n                        ? 'grey'\n                        : 'black',\n                    }}\n                  >\n                    {titleInList}\n                  </p>\n                </>\n              )\n              : (\n                <input\n                  type=\"text\"\n                  value={editValue}\n                  className=\"input is-primary\"\n                  style={{ width: '80%' }}\n                  onChange={handleChange}\n                  onKeyDown={(e) => handleKeydown(e, id)}\n                  onBlur={() => handleBlur(id)}\n                  // eslint-disable-next-line jsx-a11y/no-autofocus\n                  autoFocus\n                />\n              )}\n          </label>\n        </div>\n\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className=\"button icon has-text-info\"\n            title=\"edit\"\n            style={{ border: 'none' }}\n            disabled={edit}\n            onClick={handleClick}\n          >\n            <i className=\"fas fa-solid fa-feather fa-aling-right\" />\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"button icon has-text-danger\"\n            title=\"delete\"\n            style={{ border: 'none' }}\n            disabled={edit}\n            onClick={() => removeTodo(id)}\n          >\n            <i className=\"fas fa-solid fa-circle-xmark fa-aling-right\" />\n          </button>\n        </div>\n      </div>\n    </li>\n  );\n};\n","import React, { useContext } from 'react';\nimport { TodoItem } from './TodoItem';\nimport { TodoContext } from '../hoc/TodoProvider';\n\nexport const TodoList: React.FC = () => {\n  const content = useContext(TodoContext);\n  const todos = content?.filteredTodos;\n\n  return (\n    <>\n      {(todos && todos.length > 0) && (\n        <div className=\"panel-block\">\n          <div\n            className=\"content\"\n            style={{\n              width: '100%',\n            }}\n          >\n            <ul\n              className=\"m-0\"\n              style={{\n                listStyle: 'none',\n              }}\n            >\n              {todos.map(todo => (\n                <TodoItem\n                  key={todo.id}\n                  {...todo}\n                />\n              ))}\n            </ul>\n          </div>\n        </div>\n      )}\n    </>\n\n  );\n};\n","import React from 'react';\n\nexport const NotFoundPage: React.FC = () => (\n  <p className=\"has-text-centered has-text-danger is-size-2\">Page not found</p>\n);\n","import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { Layout } from './components/Layout';\nimport { TodoList } from './Pages/TodoList';\nimport { NotFoundPage } from './Pages/NotFoundPage/NotFoundPage';\nimport { TodoProvider } from './hoc/TodoProvider';\nimport 'bulma';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nexport const App: React.FC = () => {\n  return (\n    <TodoProvider>\n      <Routes>\n        <Route path=\"/\" element={<Layout />}>\n          <Route index element={<TodoList />} />\n          <Route path=\"active\" element={<TodoList />} />\n          <Route path=\"completed\" element={<TodoList />} />\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Route>\n      </Routes>\n    </TodoProvider>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}